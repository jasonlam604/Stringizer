{
  "name": "Stringizer",
  "tagline": "PHP String Manipulation Library with MultiByte support",
  "body": "<!--\r\n  Title: Stringizer\r\n  Description: Stringizer is a PHP string manipulation library with support for method chaining and multibyte handling\r\n  Author: jasonlam604\r\n  -->\r\n<meta name='keywords' content='string,manipulation,chaining,multibyte,php,transformer,stringizer'>  \r\n# Stringizer\r\nStringizer is a PHP string manipulation library with support for method chaining and multibyte handling\r\n\r\n[![Build Status](https://travis-ci.org/jasonlam604/Stringizer.svg?branch=master)](https://travis-ci.org/jasonlam604/Stringizer) [![Coverage Status](https://coveralls.io/repos/github/jasonlam604/Stringizer/badge.svg?branch=master)](https://coveralls.io/github/jasonlam604/Stringizer?branch=master) [![SensioLabsInsight](https://insight.sensiolabs.com/projects/de25b7db-2be0-4e1a-a3e5-806767ea0438/mini.png)](https://insight.sensiolabs.com/projects/de25b7db-2be0-4e1a-a3e5-806767ea0438)\r\n[![Latest Stable Version](https://poser.pugx.org/jasonlam604/stringizer/v/stable)](https://packagist.org/packages/jasonlam604/stringizer) [![License](https://poser.pugx.org/jasonlam604/stringizer/license)](https://packagist.org/packages/jasonlam604/stringizer)\r\n\r\n* [Overview](#overview)\r\n* [Key Highlights](#key-highlights)\r\n* [Version](#version)\r\n* [Installation](#installation)\r\n* [Tests](#tests)\r\n* [Submitting Bugs / Issues](#submit-issues)\r\n* [Contributing](#contributing)\r\n* [Credits](#credits)\r\n* [License](#license)\r\n* [Basic Functions](#basic-functions)\r\n      * [String Setter](#setstring)\r\n      * [String Getter](#getstring)\r\n      * [String Orginal Value Getter](#getstringoriginal)\r\n      * [PHP built in toString](#__tostring)\r\n      * [Encoding Setter](#setencoding)\r\n      * [Encoding Getter](#getencoding)\r\n* [String Functions](#string-functions)\r\n      * [Base64Encode](#base64decode)\r\n      * [Base64Decode](#base64encode)\r\n      * [Camelize](#camelize)\r\n      * [CharAt](#charat)\r\n      * [Chars](#chars)\r\n      * [CollapseWhitespace](#collapsewhitespace)\r\n      * [Concat](#concat)\r\n      * [Contains & Contains Case-Insensitive](#contains)\r\n      * [Contains Count & Count Case-Insensitive](#containscount)\r\n      * [Dasherize](#dasherize)\r\n      * [EndsWith](#endswith)\r\n      * [EnsureLeft](#ensureleft)\r\n      * [EnsureRight](#ensureright)\r\n      * [First](#first)\r\n      * [HasLowerCase](#haslowercase)\r\n      * [HasUpper](#hasuppercase)\r\n      * [HashCode](#hashcode)\r\n      * [IndexOf & IndexOf Case-Insensitive](#indexof)\r\n      * [IsAlpha](#isalpha)\r\n      * [IsAlphaNumeric](#isalphanumeric)\r\n      * [IsAlphaNumeric with Space](#isalphanumericspace)\r\n      * [IsAlphaNumeric with Space and Dash](#isalphanumericspacedash)\r\n      * [IsBase64]($isbase64)\r\n      * [IsBlank](#isblank)\r\n      * [IsDate](#isdate)\r\n      * [IsDecimal](#isdecimal)\r\n      * [IsEmail](#isemail)\r\n      * [IsEmpty](#isempty)\r\n      * [IsHexDecimal](#ishexdecimal)\r\n      * [IsNumber](#isnumber)\r\n      * [IsIpv4](#isipv4)\r\n      * [IsIpv6](#isipv6)\r\n      * [IsUrl](#isurl)\r\n      * [Last](#last)\r\n      * [LastIndexOf & LastIndexOf Case-Insensitive](#lastindexof)\r\n      * [Length](#length)\r\n      * [LineCount](#linecount)\r\n      * [Lowercase](#lowercase)\r\n      * [Lowercase First](#lowercasefirst)\r\n      * [Pad Both](#padboth)\r\n      * [Pad Left](#padleft)\r\n      * [Pad Right](#padright)\r\n      * [RandomAlpha](#randomalpha)\r\n      * [RandomNumeric](#randomnumeric)\r\n      * [RandomAlphaNumeric](#randomalphanumeric)\r\n      * [Replace Accents](#replaceaccents)\r\n      * [Remove Non Ascii](#removeascii)\r\n      * [Remove Whitespace](#removewhitespace)\r\n      * [Replace & Replace Case-Insensitive](#replace)\r\n      * [Reverse](#reverse)\r\n      * [SentenceCount](#sentencecount)\r\n      * [Split](#split)\r\n      * [StartsWith](#startswith)\r\n      * [Strip Punctuation](#strippunctuation)\r\n      * [Strip Tags](#striptags)\r\n      * [Sub String](#substring)\r\n      * [Trim](#trim)\r\n      * [Trim Left](#trimleft)\r\n      * [Trim Right](#trimright)\r\n      * [Truncate](#truncate)\r\n      * [Truncate Match & Truncate Match Case-Insensitive](#truncatematch)\r\n      * [Uppercase](#uppercase)\r\n      * [Uppercase Words](#uppercasewords)\r\n      * [Width](#width)\r\n      * [WordCount](#wordcount)\r\n\r\n## Overview\r\n\r\nStringizer is a string library made up of existing PHP multibyte-string functions and a variety of string manipulation solutions found on Stackoverflow.com.  The intent is to save you time looking up string maninpulation solutions yourself and provide the convience of method chaining.\r\n\r\nPSR Compliance and Code Quality:\r\n* [PSR-0: Autoloading Standard](http://www.php-fig.org/psr/psr-0/)\r\n* [PSR-1: Basic Coding Standard](http://www.php-fig.org/psr/psr-1/)\r\n* [PSR-2: Coding Style](http://www.php-fig.org/psr/psr-2/)\r\n* [PSR-4: Autoloader](http://www.php-fig.org/psr/psr-4/)\r\n* [Semver](http://semver.org/) Versioning\r\n* [100% Unit Test Coverage, results by Coveralls.io](https://coveralls.io/github/jasonlam604/Stringizer)\r\n* [Platinum Code Quality Analysis by SensioLabsInsight](https://insight.sensiolabs.com/projects/de25b7db-2be0-4e1a-a3e5-806767ea0438)\r\n* [Continuous Integration and regression unit testing using Travis CI](https://travis-ci.org/jasonlam604/Stringizer)\r\n\r\n## Key Highlights\r\n\r\n- Built in Multibyte support, where applicable and possible\r\n- Chaining of functions\r\n- In some case removing the hassle of you trying to figure out the right regex solution\r\n\r\n## Version\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/jasonlam604/stringizer/v/stable)](https://packagist.org/packages/jasonlam604/stringizer)\r\n\r\n## Installation\r\n\r\nIt's recommended that you use [Composer](https://getcomposer.org/) to install Stringizer.\r\n\r\nManual install with composer\r\n\r\n```bash\r\n$ composer require jasonlam604/stringizer \"^2.6.0\"\r\n```\r\n\r\nUsing the composer.json file\r\n\r\n```json\r\n\"require\": {\r\n    \"jasonlam604/stringizer\": \"^2.6.0\"\r\n}\r\n```\r\n\r\nThis will install Stringizer and all required dependencies. Stringizer requires PHP 5.6.0 or newer.\r\n\r\n## Usage\r\n\r\nSample usage:\r\n\r\n```php\r\n<?php\r\n\r\n// Composer Autoloader\r\nrequire 'vendor/autoload.php';\r\n\r\nuse Stringizer\\Stringizer;\r\n\r\n$s = new Stringizer(\"myapp\");\r\n\r\n$s->ensureRight(\"/\");\r\n\r\n// The following outputs: myapp/\r\necho $s->getString(); \r\n\r\n```\r\n\r\n## Tests\r\n\r\nTo execute the test suite, you'll need phpunit.\r\n\r\n```bash\r\n$ phpunit\r\n```\r\n\r\n## Submit Issues\r\n\r\nFeel free to open any Issues, Bugs or suggestions!\r\n\r\n## Contributing\r\n\r\nAccepting Pull-Requests!\r\n\r\n## Credits\r\n\r\n- [Jason Lam](https://github.com/jasonlam604)\r\n\r\n\r\n## License\r\n\r\nThe Stringizer is licensed under the MIT license. See [License File](LICENSE.md) for more information.\r\n\r\n\r\n## String Functions\r\n\r\n##### base64Decode\r\n\r\nBae64 decode string\r\n\r\n```php\r\n$s = new Stringizer(\"44GT44KT44Gr44Gh44Gv\");\r\n$s->base64Decode(); // こんにちは\r\n```\r\n\r\n##### base64Encode\r\n\r\nBase64 Encode String\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->base64Encode(); // yJjFpsWXw43DscSdw6x6xJXFlQ==\r\n```\r\n\r\n##### camelize\r\n\r\nRemoves any underscores or dashes and converts a string into camel case.\r\n\r\n```php\r\n$s = new Stringizer(\"data_rate\");\r\n$s->camelize(); // dataRate\r\n```\r\n\r\n##### charAt\r\n\r\nObtain character at specific position in a string where the first position is consider 0.\r\n\r\n```php\r\n$s = new Stringizer(\"Foo Bar Fizz Buzz\");\r\n$s->charAt(4); // B\r\n```\r\n\r\n##### chars\r\n\r\nReturn the given string as an array where each index contains a character.\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->chars(); // an array made up 10 indexes [\"Ș\",\"Ŧ\",\"ŗ\",\"Í\",\"ñ\",\"ĝ\",\"ì\",\"z\",\"ĕ\",\"ŕ\"]\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->charAt(1); // Ŧ\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->charAt(0); // S\r\n```\r\n\r\n##### collapseWhitespace\r\n\r\nRemove extra whitespace, leave only one whitespace between characters where there is more then one whitespace value.\r\n\r\n```php\r\n$s = new Stringizer(\"\"ȘŦŗÍñĝ\\n\\nìzĕŕ \\n\\t    \\r\"\");\r\n$s->concat(\"collapseWhitespace\") // ȘŦŗÍñĝ ìzĕŕ\r\n```\r\n\r\n##### concat\r\n\r\nCombine string values.\r\n\r\nCombine at end of the string.\r\n\r\n```php\r\n$s = new Stringizer(\"fizz\");\r\n$s->concat(\" buzz\") // fizz buzz\r\n```\r\n\r\nCombine at the beginning of the string by passing in the boolean value **true** in the *optional* second parameter.\r\n```php\r\n$s = new Stringizer(\" buzz\");\r\n$s->concat(\"fizz\",true) // fizz buzz\r\n```\r\n##### contains\r\n\r\nSearch for string within another string, return true if found else return false\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz foo bar\");\r\n$s->contains(\"buzz\"); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz foo bar\");\r\n$s->contains(\"Buzz\"); // false, case sensitive\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz foo bar\");\r\n$s->containsIncaseSensitive(\"Buzz\"); // true, case insensitive\r\n```\r\n\r\n##### containsCount\r\n\r\nCount the number of string occurrences\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz fizz buzz fizz buzz\");\r\n$s->containsCount(\"buzz\"); // 3\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz fizz buzz fizz buzz\");\r\n$s->containsCount(\"nomatch\"); // 0\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz foo bar\");\r\n$this->assertEquals(0, $s->containsCount(\"BUZZ\")); // 0, case sensitive no match found\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz foo bar\");\r\n$s->containsCountIncaseSensitive(\"BUZZ\"); // 1, case in-sensitive 1 match found\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"文字列のそれ 文字列のそれ 文字列のそれ 文字列のそれ\");\r\n$this->assertEquals(4, $s->containsCount(\"れ\")); // 4\r\n```\r\n\r\n##### dasherize\r\n\r\nBreak up a camelize string and seperate with dashes\r\n\r\n```php\r\n$s = new Stringizer(\"dataRate\");\r\n$s->dasherize(); // data-rate\r\n```\r\n\r\n##### endsWith\r\n\r\nChecks if a string ends with the given suffix.\r\n\r\n```php  \r\n$s = new Stringizer(\"Fizz Buzz\");\r\n$s->endsWith(\"zz\"); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"文字列のそれ\");\r\n$s->endsWith(\"れ\"); // true\r\n```  \r\n \r\n```php     \r\n$s = new Stringizer(\"文字列のそれ\");\r\n$s->endsWith(\"れれれれ\"); // false\r\n```     \r\n\r\n##### ensureLeft\r\n\r\nEnsure string starts with prefix\r\n\r\n```php  \r\n$s = new Stringizer(\"/myapp\");\r\n$s->ensureLeft(\"/\"); //  /myapp\r\n```\r\n\r\n##### ensureRight\r\n\r\nEnsure string ends with suffix\r\n\r\n```php  \r\n$s = new Stringizer(\"/myapp\");\r\n$s->ensureRight(\"/\"); //  /myapp/\r\n```\r\n\r\n##### first\r\n\r\nGrabs a section from the beginning of the string, the size of the section is determine by the given indicated value.\r\n\r\n```php  \r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->first(6); // ȘŦŗÍñĝ\r\n```\r\n\r\n##### hashCode\r\n\r\nDetermine the hashcode of a string, algorithm matches the hashCode method available in a Java String class\r\n\r\n```php  \r\n$s = new Stringizer(\"Hello, World\");\r\n$s->hashCode(); // -505841268\r\n```\r\n\r\n\r\n##### hasLowercase\r\n\r\nChecks if value is contains only lowercase values.\r\n\r\n```php  \r\n$s = new Stringizer(\"stŗiñĝìzĕŕ\");\r\n$s->hasLowercase()); // true\r\n```\r\n\r\n```php  \r\n$s = new Stringizer(\"sTŗiñĝìzĕŕ\");\r\n$s->hasLowercase()); // false\r\n```\r\n\r\n##### hasUppercase\r\n\r\nChecks if value is contains only uppercase values.\r\n\r\n```php  \r\n$s = new Stringizer(\"STÃÑ\");\r\n$s->hasUppercase()); // true\r\n```\r\n\r\n```php  \r\n$s = new Stringizer(\"StÃÑ\");\r\n$s->hasUppercase()); // false\r\n```\r\n\r\n##### indexOf\r\n\r\nFinds position of first occurrence of a string within another.\r\n\r\n```php  \r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->indexOf(\"Foo\"); // 10\r\n```\r\n\r\nIf no match is found boolean false is returned.\r\n\r\n```php  \r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->indexOf(\"bad\"); // false\r\n```\r\n\r\nThere is a second optional parameter, position offset where to begin the search where left most value is index 0.\r\n\r\n```php  \r\n$s = new Stringizer(\"Foo Buzz Foo Bar\");\r\n$s->indexOf(\"Foo\", 0); // 0, since offset starts at zero the first Foo is found at index 0\r\n$s->indexOf(\"Foo\", 1); // 9, since offset is past zero the next available match is at index 9\r\n```\r\n\r\nMultiByte\r\n\r\n```php  \r\n$s = new Stringizer(\"fòô bàř\");\r\n$s->indexOf(\"bàř\"); // 4\r\n```\r\n\r\nCase In-sensitive\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->indexOfCaseInsensitive(\"foo\"); // 10\r\n```\r\n\r\n##### isAlpha\r\n\r\nChecks if value is contains alpha values only.\r\n\r\n```php\r\n$s = new Stringizer(\"FooBar\");\r\n$s->isAlpha(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"Foo Bar\");\r\n$s->isAlpha(); // false\r\n```\r\n\r\n##### isAlphaNumeric\r\n\r\nChecks if value is contains alphanumeric values only\r\n\r\n```php\r\n$s = new Stringizer(\"F00Bar\");\r\n$s->isAlphaNumeric(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"F00 Bar\");\r\n$s->isAlphaNumeric(); // false\r\n```\r\n\r\n##### isAlphaNumericSpace\r\n\r\nChecks if value is contains alphanumeric values only including space(s).\r\n\r\n```php\r\n$s = new Stringizer(\"F00 Bar\");\r\n$s->isAlphaNumericSpace(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"F00 Bar !\");\r\n$s->isAlphaNumericSpace(); // false\r\n```\r\n\r\n##### isAlphaNumericSpaceDash\r\n\r\nChecks if value is contains alphanumeric values only including space(s) and dash(es).\r\n\r\n```php\r\n$s = new Stringizer(\"Marie-Anne Lucy\");\r\n$s->isAlphaNumericSpaceDash(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"Marie-Ann Lucy!\");\r\n$s->isAlphaNumericSpaceDash(); // false\r\n```\r\n\r\n##### isBase64\r\n\r\nChecks if value is a valid Base64 string\r\n\r\n```php\r\n// Decoded value is ȘŦŗÍñĝìzĕŕ\r\n$s = new Stringizer(\"yJjFpsWXw43DscSdw6x6xJXFlQ==\");\r\n$s->isBase64(); // true\r\n```\r\n\r\n##### isBlank\r\n\r\nChecks if value is blank (alias to isEmpty), if string contains whitespace only it is considered empty.\r\n\r\n```php\r\n$s = new Stringizer(\"\\n  \\n\\r\\t   \");\r\n$s->isBlank(); // true\r\n```\r\n\r\n##### isDate\r\n\r\nChecks if value is valid date based on the PHP function strtotime.\r\n\r\nRequirement, default timezone must be set first\r\n\r\n```php\r\ndate_default_timezone_set('America/Vancouver');\r\n$s = new Stringizer(\"2015-03-15\");\r\n$s->isDate(); // true\r\n```\r\n\r\n```php\r\ndate_default_timezone_set('America/Vancouver');\r\n$s = new Stringizer(\"January 1st\");\r\n$s->isDate(); // true\r\n```\r\n\r\n##### isDecimal\r\n\r\nChecks if value is contains decimal value, whole numbers are considered valid.\r\n\r\n```php\r\n$s = new Stringizer(\"19.99\");\r\n$s->isDecimal(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"19\");\r\n$s->isDecimal(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"19x\");\r\n$s->isDecimal(); // false\r\n```\r\n\r\n##### isEmail\r\n\r\nChecks if value is a valid email.\r\n\r\n```php\r\n$s = new Stringizer(\"John.Doe@fake.com\");\r\n$s->isEmail(); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"John.Doe@fake@.com\");\r\n$s->isEmail(); // false\r\n```\r\n\r\n##### isEmpty\r\n\r\nChecks if value is empty, if string contains whitespace only it is considered empty.\r\n\r\n```php\r\n$s = new Stringizer(\"\\n  \\n\\r\\t   \");\r\n$s->isEmpty(); // true\r\n```\r\n\r\n#### ishexdecimal\r\n\r\nChecks if value is hexdecimal.\r\n\r\n```php\r\n$s = new Stringizer(\"AB10BC99\");\r\n$s->isHexDecimal(); // true\r\n```\r\n\r\n##### isNumber\r\n\r\nChecks if value is a whole number, can be a negative number but can not be a decimal number.\r\n\r\n```php\r\n$s = new Stringizer(\"1234\");\r\n$s->isNumber() // true\r\n```\r\n\r\n##### isIPv4\r\n\r\nChecks if value is a valid IP, IPv4.\r\n\r\n```php\r\n$s = new Stringizer(\"192.168.1.1\");\r\n$s->isIpv4() // true\r\n```\r\n\r\n##### isIPv6\r\n\r\nChecks if value is a valid IP, IPv6.\r\n\r\n```php\r\n$s = new Stringizer(\"2001:cdba:0000:0000:0000:0000:3257:9652\");\r\n$s->isIpv6() // true\r\n```\r\n\r\n##### isUrl\r\n\r\nChecks if value is contains a valid URL\r\n\r\n```php\r\n$s = new Stringizer(\"https://github.com\");\r\n$s->isUrl(); // true\r\n```\r\n\r\n##### last\r\n\r\nGrabs a section from the end of the string, the size of the section is determine by the given indicated value.\r\n\r\n```php  \r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->last(4); // ìzĕŕ\r\n```\r\n\r\n#### lastIndexOf\r\n\r\nFinds position of last occurrence of a string within another\r\n\r\n```php\r\n$s = new Stringizer(\"Foo Buzz Foo Bar\");\r\n$s->lastIndexOf(\"Foo\"); // 9\r\n```\r\n\r\nIf no match is found boolean false is returned.\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->lastIndexOf(\"bad\"); // false\r\n```\r\n\r\nThere is a second optional parameter, position offset where to begin the search where left most value is index 0.\r\n\r\n```php\r\n$s = new Stringizer(\"Foo Buzz Foo Bar\");\r\n$s->lastIndexOf(\"Foo\", 0); // 9 \r\n$s->lastIndexOf(\"Foo\", 4)); // 9\r\n$s->lastIndexOf(\"Foo\", 10)); // false\r\n```\r\n\r\nMultiByte\r\n\r\n```php\r\n$s = new Stringizer(\"fòô bàř fòô bàř fòô bàř\");\r\n$s->lastIndexOf(\"fòô\"); // 16\r\n```\r\n\r\nCase In-sensitive\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->lastIndexOf(\"foo\"); //false\r\n$s->lastIndexOfCaseInsensitive(\"foo\"); // 10\r\n```\r\n\r\n#### length\r\n\r\nFind the length of the string\r\n\r\n```php\r\n$s = new Stringizer(\"FizzBuzz\");\r\n$s->length(); // 8\r\n```\r\n\r\nMultibyte\r\n\r\n```php\r\n$s = new Stringizer(\"キラキラした\");\r\n$s->length(); // 6\r\n```\r\n\r\n#### lineCount\r\n\r\nCount the number of lines based line feed, \\n.\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\\nȘŦŗÍñĝìzĕŕ\\nȘŦŗÍñĝìzĕŕ\");\r\n$s->lineCount(); // 2\r\n```\r\n\r\n#### lowercase\r\n\r\nEnsure the string is entirely lower case\r\n\r\n```php\r\n$s = new Stringizer(\"FiZZ\");\r\n$s->lowercase(); // fizz\r\n```\r\n\r\n#### lowercaseFirst\r\n\r\nFirst letter of the string is lower cased\r\n\r\n```php\r\n$s = new Stringizer(\"FiZz\");\r\n$s->lowercaseFirst(); // fIZZ\r\n```\r\n\r\n#### padBoth\r\n\r\nPad string on both sides with indicated value\r\n\r\nPadding with an even amount\r\n\r\n```php\r\n$s = new Stringizer(\"fizz\");\r\n$s->padBoth(\"x\", 10); // xxxfizzxxx\r\n```  \r\n\r\nPadding with an odd amount, the extra character is addded to the end of the string\r\n\r\n```php\r\n$s = new Stringizer(\"fizz\");\r\n$s->padBoth(\"x\", 11); // xxxfizzxxxx\r\n```\r\n\r\n#### padLeft\r\n\r\nPad string on left side with indicated string value and number of times to pad with\r\n\r\n```php\r\n$s = new Stringizer(\"10\");\r\n$s->padLeft(\"0\", 5); // 00010\r\n```\r\n\r\n#### padRight\r\n\r\nPad string on right side with indicated string value and number of times to pad with\r\n\r\n```php\r\n$s = new Stringizer(\"Alien\");\r\n$this->assertEquals(\"Alien     \", $s->padRight(\" \", 10)); // \"Alien     \" \r\n```\r\n\r\n#### randomAlpha\r\n\r\nGenerate a random alpha value, default length of 10 characters.\r\n\r\n```php\r\n$s = new Stringizer(\"\");\r\n$s->randomAlpha(); // aYvPXitjCJ\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"\");\r\n$s->randomAlpha(20); // cmbOUofxAvWeyMGgPHK\r\n```\r\n\r\n#### randomNumeric\r\n\r\nGenerate a random  string value containing only numeric values, default length of 10 characters. It\r\nis important to note this is a string value because otherwise if a value with leading zeros such\r\nas 0123456789 would then be 123456789 as type int; but, then would not be length of 10 characters (or the\r\ndesired indicated expected length)\r\n\r\n```php\r\n$s = new Stringizer(\"\");\r\n$s->randomNumeric(); // 8277761361\r\n```\r\n\r\n#### randomAlphaNumeric\r\n\r\nGenerate a random alphanumeric value, default length of 10 characters.\r\n\r\n```php\r\n$s = new Stringizer(\"\");\r\n$s->randomAlphanumeric(); // w5quanvlUP\r\n```\r\n\r\n#### replaceAccents\r\n\r\nReplace characters with accents with the same character without accents\r\n\r\n```php\r\n$s = new Stringizer(\"FizzöBuzz Fizz Buzz Fizz Buzzé\");\r\n$s->replaceAccents(); // FizzoeBuzz Fizz Buzz Fizz Buzze\r\n```\r\n  \r\n```php        \r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ\");\r\n$s->replaceAccents(); // STrIngizer\r\n```\r\n\r\n#### removeAscii\r\n\r\nRemove non Ascii characters\r\n\r\n```php\r\n$s = new Stringizer(\"FizzöBuzz Fizz Buzz Fizz Buzzé\");\r\n$s->removeNonAscii(); // FizzBuzz Fizz Buzz Fizz Buzz\r\n```\r\n\r\n#### removeWhitespace\r\n\r\nRemove any whitespace from the string (before, after and any in between)\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Fizz Buzz Fizz Buzz\");\r\n$s->removeWhitespace(); // FizzBuzzFizzBuzzFizzBuzz\r\n```\r\n \r\n```php       \r\n$s = new Stringizer(\" Ș Ŧ ŗ Í ñ ĝ ì z ĕ ŕ \");\r\n$s->removeWhitespace(); // ȘŦŗÍñĝìzĕŕ\r\n```\r\n\r\n#### replace\r\n\r\nMatch and replace string(s)\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Fizz Buzz Fizz Buzz\");\r\n$s->replace(\"Buzz\", \"Bar\"); // Fizz Bar Fizz Bar Fizz Bar\r\n```\r\n\r\nMultiple replace\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Fizz Buzz Fizz Buzz\");\r\n$s->replace(array(\"Fizz\",\"Buzz\"), array(\"Foo\",\"Bar\")); // Foo Bar Foo Bar Foo Bar\r\n```\r\n\r\nNo Match NOT Case-Insensitive\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz Buzz Fizz Buzz Fizz Buzz\");\r\n$s->replace(\"buzz\", \"bar\"); // Fizz Buzz Fizz Buzz Fizz Buzz\r\n```        \r\n        \r\nMatch Case-Insensitive  \r\n```php      \r\n$s = new Stringizer(\"Fizz Buzz Fizz Buzz Fizz Buzz\");\r\n$s->replaceIncaseSensitive(\"buzz\", \"bar\"); // Fizz bar Fizz bar Fizz bar\r\n``` \r\n\r\nMultiByte\r\n\r\n```php\r\n$s = new Stringizer(\"Fizz列Buzz列Fizz列Buzz列Fizz列Buzz\");\r\n$s->replace(\"列\", \" \"); // Fizz Buzz Fizz Buzz Fizz Buzz\r\n```\r\n\r\n#### reverse\r\n\r\n```php        \r\n$s = new Stringizer(\"mood\");\r\n$s->reverse(); // doom\r\n```\r\n    \r\nMultiByte    \r\n    \r\n```php     \r\n$s = new Stringizer(\"文字列のそれ\");\r\n$s->reverse(); // れその列字文\r\n```\r\n\r\n#### sentenceCount\r\n\r\nCount the number of sentences based sentences ending with one the following: . ! or ?\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ jumped over the stringy stick. ȘŦŗÍñĝìzĕŕ jumped over the stringy stick again!  Or did it?\");\r\n$s->sentenceCount(); // 3\r\n```\r\n\r\n#### split\r\n\r\nExplode string into an array default delimiter is comma\r\n\r\n```php        \r\n$s = new Stringizer(\"Fizz Buzz\");\r\n$array = $s->split(\" \"); // array( 0 => \"Fizz\", 1 => \"Buzz\")\r\n```\r\n\r\n```php \r\n$s = new Stringizer(\"文字列のそれ\");\r\n$array = $s->split(\"の\"); // array( 0 => \"文字列\", 1 => \"それ)\r\n```\r\n\r\n##### startsWith\r\n\r\nChecks if a string starts with the specified suffix.\r\n\r\n```php        \r\n$s = new Stringizer(\"Fizz Buzz\");\r\n$s->startsWith(\"Fizz B\"); // true\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"文字列のそれ\");\r\n$s->startsWith(\"文\"); // true\r\n```\r\n\r\n```php        \r\n$s = new Stringizer(\"文字列のそれ\");\r\n$s->startsWith(\"文文文文\"); // false\r\n```\r\n\r\n#### stripPunctuation\r\n\r\nRemove all of the punctuation\r\n\r\n```php \r\n$s = new Stringizer(\"Hello World! It's me #stringizer\");\r\n$s->stripPunctuation(); // Hello World Its me stringizer\r\n```      \r\n      \r\n```php   \r\n$s = new Stringizer(\"*-=!'\\\",?!Hello* World][\");\r\n$s->stripPunctuation(); // Hello World\r\n```\r\n\r\n#### stripTags\r\n\r\nRemove HTML and PHP tags from a string\r\n\r\n```php \r\n$s = new Stringizer(\"<html>Hello</html>\");\r\n$s->stripTags(); // Hello\r\n```    \r\n       \r\n```php         \r\n$s = new Stringizer(\"<html><b>こんにちは世界</b></html>\");\r\n$s->stripTags(); // こんにちは世界\r\n```\r\n     \r\nOptional second paramter to ignore tags (tags not to be to removed)        \r\n        \r\n```php \r\n$s = new Stringizer(\"<html>Hello <b>World</b></html>\");\r\n$s->stripTags(\"<b>\"); // Hello <b>World</b>\r\n```\r\n\r\n```php \r\n$s = new Stringizer(\"<html><head><title>title</title></head><body>Hello <b><span class='fake-class'>World</span></b> こんにちは世界</body></html>\");\r\n$s->stripTags(); // titleHello World こんにちは世界\r\n```\r\n\r\n#### substring\r\n\r\nFind a portion of a string based on postioning (index position in the string) and length of the portion\r\n\r\n```php \r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->subString(0, 4); // Fizz\r\n```\r\n\r\n```php \r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->subString(5, 4)); // Buzz\r\n```\r\n\r\n```php \r\n$s = new Stringizer(\"Fizz Buzz Foo Bar\");\r\n$s->subString(5, 4)); // Buzz\r\n```\r\n\r\nMultiByte\r\n\r\n```php\r\n$s = new Stringizer(\"キラキラした キラキラした\");\r\n$s->subString(7); // キラキラした\r\n``` \r\n\r\n#### trim\r\n\r\nRemove whitespace both right and left side of the string\r\n\r\n```php\r\n$s = new Stringizer(\"\\x20\\x20\\x20   キラキラしたfizzخالد الشمعة   \");\r\n$s->trim(); // キラキラしたfizzخالد الشمعة\r\n```\r\n\r\n#### trimLeft\r\n\r\nRemove whitespace left of the string\r\n\r\n```php\r\n$s = new Stringizer(\"\\x20\\x20\\x20   キラキラしたfizzخالد الشمعة   \");\r\n$s->trimLeft()); // キラキラしたfizzخالد الشمعة   \r\n```\r\n\r\n#### trimRight\r\n\r\nRemove whitespace right of the string\r\n\r\n```php\r\n$s = new Stringizer(\"\\x20\\x20\\x20   キラキラしたfizzخالد الشمعة   \");\r\n$s->trimRight(); // \\x20\\x20\\x20   キラキラしたfizzخالد الشمعة\r\n```\r\n    \r\n#### truncate\r\n\r\nShorten right side of string by the specified indicated amount\r\n\r\n```php\r\n$s = new Stringizer(\"fòô bàř\");\r\n$s->truncate(4); // fòô\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"FizzBuzz\");\r\n$s->truncate(4); // Fizz\r\n```\r\n\r\n#### truncateMatch\r\n\r\nShorten string left or right side if given substring is match\r\n\r\n```php\r\n$s = new Stringizer(\"fòô bàř\");\r\n$s->truncateMatch(\" bàř\"); // fòô\r\n```\r\n\r\n```php\r\n$s = new Stringizer(\"FizzBuzzFooBar\");\r\n$s->truncateMatch(\"Foo\"); // FizzBuzz\r\n```\r\n\r\nCase In-sensitive\r\n\r\n```php\r\n$s = new Stringizer(\"FizzBuzzFooBar\");\r\n$s->truncateMatchCaseInsensitive(\"foo\"); // FizzBuzz\r\n```\r\n\r\n#### uppercase\r\n\r\nEnsure entire string is uppercase\r\n\r\n```php\r\n$s = new Stringizer(\"fIzz\");\r\n$s->uppercase(); // FIZZ\r\n```\r\n\r\n#### uppercaseWords\r\n\r\nEnsure entire string is uppercase\r\n\r\n```php\r\n$s = new Stringizer(\"fizz buzz foo bar\");\r\n$s->uppercaseWords(); // Fizz Buzz Foo Bar\r\n```\r\n\r\n##### width\r\n\r\nFind the width of the string this is different then length for multibyte strings\r\n\r\n```php\r\n$s = new Stringizer(\"キラキラした\");\r\n$s->width(); // 12, note multi-byte characters take up more space, typice 2 for each character\r\n```  \r\n  \r\n```php        \r\n$s = new Stringizer(\"FizzBuzz\");\r\n$s->length(); // 8\r\n```\r\n\r\n#### wordCount\r\n\r\nCount the number of words.\r\n\r\n```php\r\n$s = new Stringizer(\"ȘŦŗÍñĝìzĕŕ こんにちは ȘŦŗÍñĝìzĕŕ こんにちは ȘŦŗÍñĝìzĕŕ\");\r\n$s->wordCount(); // 5\r\n```\r\n\r\n## Basic Functions\r\n\r\n#### setstring\r\n\r\nSetting the string you want to apply string manipulations on, this will set the orginal value as well.\r\n\r\n```php\r\n$s = new Stringizer(\"dummy-value\");\r\n$s->setString(\"new-dummy-value\");\r\n\r\n#### getstring\r\n\r\nRetrieve the string in its most current state\r\n\r\n```php\r\n$s = new Stringizer(\"dummy-value\");\r\n$s->getString();\r\n```\r\n\r\n#### getStringOriginal\r\n\r\nRetrieve the string state prior to any string manipulations\r\n\r\n```php\r\n$s = new Stringizer(\"dummy-value\");\r\n$s->getStringOriginal();\r\n```\r\n\r\n#### __toString\r\n\r\nRetrieve the string in its most current state\r\n\r\n```php\r\n$s = new Stringizer(\"dummy-value\");\r\necho ($s); // this will output current state, defaults to using the PHP built __toString method\r\n```\r\n\r\n#### setEncoding\r\n\r\nSet encoding, behind the scences PHP function mb_internal_encoding is applied\r\n\r\n```php\r\n$s = new Stringizer(\"dummy-value\");\r\n$s->setEncoding(\"UTF-8\");\r\n$s->getEncoding(); // UTF-8\r\n```\r\n\r\n#### getEncoding\r\n\r\n```php\r\n$s = new Stringizer(\"dummy-value\");\r\n$s->getEncoding(); // Outputs your default encoding based mb_internal_encoding\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}